Grade: 40/40

Rubric for ia2:

Overall Comments:

Consider if Fact Expr production needs to retain the open and close paren tokens.

-Submission

    - all files that were required to complete the assignment
    - a README.md file that has been completed


Documentation:
	-README.md has been updated with a new reflection: [5 points] ok

Automated Checks:

	- Your parser outputs the correct trees for expressions like ((x)) and x + 1 / 2 [35 points]

    Looks good to me! 

commit 2e6b4fa7da9f764b26c997868994cd80f5315744
Author: Aidan Tracy <aidantracy@u.boisestate.edu>
Date:   Mon Sep 23 16:42:34 2024 -0600

    Minor fixes
syntax.ParserGrader Compile Passed
prg = x + 3 - 1 / y * 4
Given Tree
node.Expr (
	 term: node.Term (
		 fact: node.FactNum (
			 num: <num,4> 
		 )
		 mulop: node.Mulop (
			 mulop: <*,*> 
		 )
		 term: node.Term (
			 fact: node.FactId (
				 id: <id,y> 
			 )
			 mulop: node.Mulop (
				 mulop: </,/> 
			 )
			 term: node.Term (
				 fact: node.FactNum (
					 num: <num,1> 
				 )
				 mulop: null term: null 
			 )
			 
		 )
		 
	 )
	 addop: node.Addop (
		 addop: <-,-> 
	 )
	 expr: node.Expr (
		 term: node.Term (
			 fact: node.FactNum (
				 num: <num,3> 
			 )
			 mulop: null term: null 
		 )
		 addop: node.Addop (
			 addop: <+,+> 
		 )
		 expr: node.Expr (
			 term: node.Term (
				 fact: node.FactId (
					 id: <id,x> 
				 )
				 mulop: null term: null 
			 )
			 addop: null expr: null 
		 )
		 
	 )
	 
 )

------------------
Expected Tree
NodeExpr (
	 term: NodeTerm (
		 fact: NodeFactNum (
			 num: <num,4> 
		 )
		 mulop: NodeMulop (
			 mulop: <*,*> 
		 )
		 term: NodeTerm (
			 fact: NodeFactId (
				 id: <id,y> 
			 )
			 mulop: NodeMulop (
				 mulop: </,/> 
			 )
			 term: NodeTerm (
				 fact: NodeFactNum (
					 num: <num,1> 
				 )
				 mulop: null term: null 
			 )
			 
		 )
		 
	 )
	 addop: NodeAddop (
		 addop: <-,-> 
	 )
	 expr: NodeExpr (
		 term: NodeTerm (
			 fact: NodeFactNum (
				 num: <num,3> 
			 )
			 mulop: null term: null 
		 )
		 addop: NodeAddop (
			 addop: <+,+> 
		 )
		 expr: NodeExpr (
			 term: NodeTerm (
				 fact: NodeFactId (
					 id: <id,x> 
				 )
				 mulop: null term: null 
			 )
			 addop: null expr: null 
		 )
		 
	 )
	 
 )

prg = x + 3
Given Tree
node.Expr (
	 term: node.Term (
		 fact: node.FactNum (
			 num: <num,3> 
		 )
		 mulop: null term: null 
	 )
	 addop: node.Addop (
		 addop: <+,+> 
	 )
	 expr: node.Expr (
		 term: node.Term (
			 fact: node.FactId (
				 id: <id,x> 
			 )
			 mulop: null term: null 
		 )
		 addop: null expr: null 
	 )
	 
 )

------------------
Expected Tree
NodeExpr (
	 term: NodeTerm (
		 fact: NodeFactNum (
			 num: <num,3> 
		 )
		 mulop: null term: null 
	 )
	 addop: NodeAddop (
		 addop: <+,+> 
	 )
	 expr: NodeExpr (
		 term: NodeTerm (
			 fact: NodeFactId (
				 id: <id,x> 
			 )
			 mulop: null term: null 
		 )
		 addop: null expr: null 
	 )
	 
 )

prg = (((x) + 1) / 2 )
Given Tree
node.Expr (
	 term: node.Term (
		 fact: node.FactOpExprOp (
			 leftParen: <(
				,(
					> expr: node.Expr (
						 term: node.Term (
							 fact: node.FactNum (
								 num: <num,2> 
							 )
							 mulop: node.Mulop (
								 mulop: </,/> 
							 )
							 term: node.Term (
								 fact: node.FactOpExprOp (
									 leftParen: <(
										,(
											> expr: node.Expr (
												 term: node.Term (
													 fact: node.FactNum (
														 num: <num,1> 
													 )
													 mulop: null term: null 
												 )
												 addop: node.Addop (
													 addop: <+,+> 
												 )
												 expr: node.Expr (
													 term: node.Term (
														 fact: node.FactOpExprOp (
															 leftParen: <(
																,(
																	> expr: node.Expr (
																		 term: node.Term (
																			 fact: node.FactId (
																				 id: <id,x> 
																			 )
																			 mulop: null term: null 
																		 )
																		 addop: null expr: null 
																	 )
																	 rightParen: <
																 )
																,
															 )
															> 
														 )
														 mulop: null term: null 
													 )
													 addop: null expr: null 
												 )
												 
											 )
											 rightParen: <
										 )
										,
									 )
									> 
								 )
								 mulop: null term: null 
							 )
							 
						 )
						 addop: null expr: null 
					 )
					 rightParen: <
				 )
				,
			 )
			> 
		 )
		 mulop: null term: null 
	 )
	 addop: null expr: null 
 )

------------------
Expected Tree
NodeExpr (
	 term: NodeTerm (
		 fact: NodeFactExpr (
			 expr: NodeExpr (
				 term: NodeTerm (
					 fact: NodeFactNum (
						 num: <num,2> 
					 )
					 mulop: NodeMulop (
						 mulop: </,/> 
					 )
					 term: NodeTerm (
						 fact: NodeFactExpr (
							 expr: NodeExpr (
								 term: NodeTerm (
									 fact: NodeFactNum (
										 num: <num,1> 
									 )
									 mulop: null term: null 
								 )
								 addop: NodeAddop (
									 addop: <+,+> 
								 )
								 expr: NodeExpr (
									 term: NodeTerm (
										 fact: NodeFactExpr (
											 expr: NodeExpr (
												 term: NodeTerm (
													 fact: NodeFactId (
														 id: <id,x> 
													 )
													 mulop: null term: null 
												 )
												 addop: null expr: null 
											 )
											 
										 )
										 mulop: null term: null 
									 )
									 addop: null expr: null 
								 )
								 
							 )
							 
						 )
						 mulop: null term: null 
					 )
					 
				 )
				 addop: null expr: null 
			 )
			 
		 )
		 mulop: null term: null 
	 )
	 addop: null expr: null 
 )
